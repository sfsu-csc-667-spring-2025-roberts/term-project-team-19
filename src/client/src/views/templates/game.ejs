<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <% styles.forEach(function(style) { %>
        <link rel="stylesheet" href="<%= style %>">
    <% }); %>
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>
    <script src="/js/socket.js"></script>
    <script src="/js/auth.js"></script>
    <script src="/js/game.js"></script>
    <script src="/js/gameplay.js"></script>
</head>
<body>
    <div class="container">
        <h1>Game Room</h1>
        <div id="gameBoard">
            <div id="discardPile" class="discard-pile">
                <!-- Discard pile will be displayed here -->
            </div>
            <div class="game-chat">
                <%- include('shared/chat') %>
            </div>
        </div>
        <div id="playerHand" class="player-hand">
            <!-- Player's cards will be displayed here -->
            <button id="drawCard" class="draw-button" style="display: none;">Draw</button>
        </div>
        <div id="gameControls">
            <button id="leaveGame">Leave Game</button>
        </div>
    </div>

    <!-- Wild Card Color Selection Popup -->
    <div id="wildCardPopup" class="wild-card-popup" style="display: none;">
        <div class="wild-card-content">
            <h2>Choose a Color</h2>
            <div class="color-options">
                <div class="color-option" data-color="red">
                    <img src="/cards/wild/wild_red.svg" alt="Wild Red">
                </div>
                <div class="color-option" data-color="green">
                    <img src="/cards/wild/wild_green.svg" alt="Wild Green">
                </div>
                <div class="color-option" data-color="blue">
                    <img src="/cards/wild/wild_blue.svg" alt="Wild Blue">
                </div>
                <div class="color-option" data-color="yellow">
                    <img src="/cards/wild/wild_yellow.svg" alt="Wild Yellow">
                </div>
            </div>
        </div>
    </div>

    <style>
        .wild-card-popup {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .wild-card-content {
            background-color: #1e1e1e;
            padding: 2rem;
            border-radius: 8px;
            text-align: center;
        }

        .wild-card-content h2 {
            color: #ff4400;
            margin-bottom: 1.5rem;
        }

        .color-options {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .color-option {
            width: 100px;
            height: 150px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .color-option:hover {
            transform: translateY(-10px);
        }

        .color-option img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .draw-button {
            width: 100px;
            height: 150px;
            margin: 10px;
            background-color: #1e1e1e;
            border: 2px solid #ff4400;
            color: #ff4400;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.2em;
            transition: transform 0.2s;
            display: block;
            position: relative;
            z-index: 1;
        }

        .draw-button:hover {
            transform: translateY(-10px);
            background-color: #ff4400;
            color: #1e1e1e;
        }
    </style>

    <script>
        const game = Game.getInstance();
        const auth = Auth.getInstance();
        const socketManager = SocketManager.getInstance();
        const gameplay = Gameplay.getInstance();
        
        const game_id = window.location.pathname.split('/')[2];
        const user = auth.getUser();
        const user_id = user.id;

        // Check if user is already authenticated
        auth.isAuthenticated().then(isAuth => {
            if (!isAuth) {
                window.location.href = "/login";
            }
        });

        // Join the game room for chat
        socketManager.joinGame(game_id, user.username);

        socketManager.getSocket()?.on('cardPlayed', async (data) => {
            console.log("Card played:", data);
            updateUI();
            handleTurn();
        });

        socketManager.getSocket()?.on('cardDrawn', async (data) => {
            console.log("Card played:", data);
            updateUI();
            handleTurn();
        });



        let topCard = null;

        async function updateUI() {
            try {
                const gameData = await game.fetchUserCards(game_id, user_id);
                const res = await gameData.json();
                console.log("Fetching user cards...");
                console.log("Game data:", res);

                // Update player's hand
                const playerHand = document.getElementById('playerHand');
                playerHand.innerHTML = ''; // Clear existing cards
                
                // Update discard pile first to get the top card
                const discardPile = document.getElementById('discardPile');
                console.log("Discard pile element:", discardPile);
                discardPile.innerHTML = ''; // Clear existing card
                topCard = null;
                if (res.discard) {
                    topCard = res.discard;
                    const discardCard = createCardElement(res.discard);
                    discardPile.appendChild(discardCard);
                }

                // Add cards to player's hand with playable status
                res.user.forEach(card => {
                    const cardElement = createCardElement(card);
                    const isPlayable = isCardPlayable(card, topCard, res.currentTurn);
                    cardElement.classList.add(isPlayable ? 'playable' : 'unplayable');
                    if (isPlayable) {
                        cardElement.addEventListener('click', () => handleCardClick(card));
                    }
                    playerHand.appendChild(cardElement);
                });

                // Create and add draw button
                const drawButton = document.createElement('button');
                drawButton.id = 'drawCard';
                drawButton.className = 'draw-button';
                drawButton.textContent = 'Draw';
                drawButton.style.display = 'none';
                drawButton.addEventListener('click', async () => {
                    const response = await gameplay.drawCard(game_id);
                    if (response.ok) {
                        socketManager.drawCard(game_id);
                    }
                });
                playerHand.appendChild(drawButton);

                // Update draw button visibility
                if (res.currentTurn.user_id === user_id) {
                    const hasPlayableCards = res.user.some(card => 
                        isCardPlayable(card, topCard, res.currentTurn)
                    );
                    drawButton.style.display = hasPlayableCards ? 'none' : 'block';
                }
            } catch (error) {
                console.error("Error updating UI:", error);
            }
        }

        async function handleTurn() {
            const gameData = await game.fetchUserCards(game_id, user_id);
            const res = await gameData.json();
            const currentTurn = res.currentTurn;
            const lastCardPlayed = res.discard;
            
            if (currentTurn.user_id === user_id) {
                socketManager.getSocket()?.emit('currentTurn', {
                    game_id: game_id,
                    user_id: user_id,
                });
            }
        }
        

        function isCardPlayable(card, topCard, currentTurn) {
            if (auth.getUser().id !== currentTurn.user_id) {
                return false;
            }
            if (!topCard) return true; // If no top card, all cards are playable
            
            // Wild cards are always playable
            if (card.type === 'wild') return true;
            
            // Check if colors match
            if (card.color === topCard.color) return true;
            
            // For normal cards, check if values match
            if (card.type === 'normal' && card.value === topCard.value) return true;
            
            // For action cards, check if actions match
            if (card.type === 'action' && card.action === topCard.action) return true;
            
            return false;
        }

        async function handleCardClick(card) {
            if (card.type === 'wild') {
                showWildCardPopup(card);
            } else if (card.type === 'action') {
                const response = await gameplay.playActionCard(game_id, card, true ? card.action === topCard.action : false);
                if (response.ok) {
                    const cardString = card.color + " " + card.action;
                    socketManager.playCard(game_id, cardString);
                }
            } else {
                const response = await gameplay.playCard(game_id, card, true ? card.value === topCard.value && card.color !== topCard.color : false);
                if (response.ok) {
                    const cardString = card.color + " " + card.value;
                    socketManager.playCard(game_id, cardString);
                }
            }
        }


        async function showWildCardPopup(card) {
            const popup = document.getElementById('wildCardPopup');
            popup.style.display = 'flex';

            // Add click handlers for color options
            const colorOptions = document.querySelectorAll('.color-option');
            colorOptions.forEach(option => {
                option.onclick = async () => {
                    const selectedColor = option.dataset.color;
                    console.log(`Selected color: ${selectedColor} for wild card:`, card);
                    
                    popup.style.display = 'none';
                    const response = await gameplay.playWildCard(game_id, card, selectedColor);
                    if (response.ok) {
                        const cardString = selectedColor + " " + card.type;
                        socketManager.playCard(game_id, cardString);
                    }
                };
            });
        }

        document.getElementById('wildCardPopup').addEventListener('click', (e) => {
            if (e.target.id === 'wildCardPopup') {
                e.target.style.display = 'none';
            }
        });

        function createCardElement(card) {
            console.log("Creating card element for:", card);
            const cardDiv = document.createElement('div');
            
            cardDiv.dataset.cardId = card.id;
            const img = document.createElement('img');
            
            // Determine the card image path based on card properties
            let imagePath = '/cards/';
            if (card.type === 'wild') {
                if (card.color === 'none') {
                    imagePath += `wild/wild.svg`;
                } else {
                    imagePath += `wild/wild_${card.color}.svg`;
                }
                cardDiv.className = 'card wild';
            } else if (card.type === 'action') {
                imagePath += `${card.action}/${card.action}_${card.color}.svg`;
                cardDiv.className = `card ${card.action}_${card.color}`;
            } else {
                imagePath += `${card.value}/${card.value}_${card.color}.svg`;
                cardDiv.className = `card ${card.value}_${card.color}`;
            }
            console.log("Card image path:", imagePath);

            img.src = imagePath;
            img.alt = `${card.color} ${card.value || card.action || 'wild'}`;
            
            cardDiv.appendChild(img);
            return cardDiv;
        }

        // Call updateUI when the page loads
        document.addEventListener('DOMContentLoaded', async () => {
            console.log("DOM loaded, calling updateUI...");
            
            updateUI();
        });
    </script>
</body>
</html> 